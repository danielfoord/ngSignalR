{"name":"ngSignalR","tagline":"AngularJS Provider for SignalR jQuery clients","body":"# ngSignalR [![Build Status](https://travis-ci.org/danielfoord/ngSignalR.svg?branch=master)](https://travis-ci.org/danielfoord/ngSignalR)#\r\n\r\nAn AngularJS provider for the SignalR JQuery client.\r\n\r\nThis module depends on the following libraries:\r\n\r\n- [JQuery](http://jquery.com/)\r\n- [AngularJS](https://angularjs.org/)\r\n- [SignalR JQuery Client](https://github.com/SignalR/SignalR)\r\n\r\n## Installing ##\r\nBower:\r\n`bower install ngsignalr`\r\n\r\nManuaL: Just download the repo and\r\n`<script src=\"ngSignalR.js\"></script>`\r\n\r\n## Setting Up ##\r\nTo inject the module  into your app use 'ngSignalR' as shown below:\r\n```javascript\r\nangular.module('App', ['ngSignalR']);\r\n```\r\n\r\nTo configure the connection transports, use the setTransports function in the config section of your app:\r\n```javascript\r\nangular.module('App')\r\n  .config(function(signalrProvider){\r\n    signalrProvider.setTransports(['webSockets', 'serverSentEvents']);\r\n});\r\n```\r\n\r\nSignalR takes 4 transport methods: \r\n\r\n- Web Sockets\r\n- Server Sent Events\r\n- Forever Frame\r\n- Long Polling\r\n\r\n\r\n## Usage ##\r\n\r\n### Creating a connection ###\r\nThere are 2 ways to create connections in the SignalR client, one way is to use the generated proxy, and another is to use your own proxy.\r\n\r\n#### With the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n\r\n#### Without the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\nNOTE: Starting the connection should be done right at the end:\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n  \r\n  //Must come before starting the connection\r\n  signalr.logging(connection, true); //Enabled default SignalR client logging\r\n  signalr.receive(connection, 'eventName', function (data) {\r\n    console.log(data);\r\n  });\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\nBest practice is to have a function that starts the connection and binds all the listener events:\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n  \r\n  var startConnection = function () {    \r\n    signalr.receive(connection, 'eventName', function (data) {\r\n      //Do something when invoked by server\r\n    });\r\n\r\n    signalr.startHubConnection(connection); //Start the connection\r\n  };\r\n  startConnection();\r\n});\r\n```\r\n\r\nStarting the connection also returns a promise that gets resolved once the connection is made:\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n  \r\n  $scope.model = {\r\n    connectionOpen: false // Initialize the connectionOpen flag as false\r\n  };\r\n\r\n  var startConnection = function () {    \r\n    signalr.receive(connection, 'eventName', function (data) {\r\n      //Do something when invoked by server\r\n    });\r\n\r\n    signalr.startHubConnection(connection)\r\n    .then(function() {\r\n      $scope.model.connectionOpen = true; //Set the connected flag to true\r\n    });\r\n  };\r\n  startConnection();\r\n});\r\n```\r\n\r\n### Receiving data ###\r\nTo receive data we will have to look at which way the connection was established, these are the 2 ways of receiving data:\r\n\r\n#### With the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n  signalr.receive(connection, 'eventName', function (data) {\r\n    console.log(data);\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n\r\n#### Without the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.receiveProxy(proxy, 'eventName', function (data) {\r\n    console.log(data);\r\n  });\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n### Sending Data ###\r\n#### With the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  $scope.send = function() {\r\n    var obj = {\r\n      property1: 'abc'\r\n    };\r\n    signalr.send(connection, 'eventName', obj);\r\n  };\r\n\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n\r\n#### Without the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  $scope.send = function () {\r\n    var obj = {\r\n      property1: 'abc'\r\n    };\r\n    signalr.sendProxy(proxy, 'eventName', obj);\r\n  };\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n### Stopping a connection ###\r\n#### With the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  $scope.stopConnection = function () {\r\n    signalr.stopConnection(connection)\r\n    .then(function () {\r\n      //Do Something after connection is closed.\r\n    });\r\n  };\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n\r\n#### Without the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  $scope.stopConnection = function () {\r\n    signalr.stopConnection(connection)\r\n    .then(function () {\r\n      //Do Something after connection is closed.\r\n    });\r\n  };\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#####Stopping a connection on when view is changed #####\r\nIf we don't clean up the connection on view changes, the connection will remain open. To clean up we use Angular's garbage collection in our controller.\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  //Garbage Collection\r\n  $scope.$on('$destroy', function () {\r\n    signalr.stopConnection(connection);\r\n  });\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n### Events ###\r\nThe following functions provide a means to execute code on a connection's lifetime events.\r\n\r\n#### On Start ####\r\nThis fires when a connection is made and no data has come in yet.\r\n#### With the generated Proxy: ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.starting(function() {\r\n    //Do something when the connection starts before any data is received\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.starting(function() {\r\n    //Do something when the connection starts before any data is received\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Receive ####\r\nThis is fired when any client side function is invoked by the server.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.received(function() {\r\n    //Do something when a client side function is invoked\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.received(function() {\r\n    //Do something when a client side function is invoked\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Slow Connection ####\r\nThis is fired when SignalR detects a slow connection.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.connectionSlow(function() {\r\n    //Do something when the connection is slow\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.connectionSlow(function() {\r\n    //Do something when the connection is slow\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Disconnection ####\r\nThis is fired when the connection is terminated.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.disconnected(function() {\r\n    //Do something when the connection is terminated\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.disconnected(function() {\r\n    //Do something when the connection is terminated\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Reconnecting ####\r\nThis is fired when the client is reconnecting to the server.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.reconnecting(function() {\r\n    //Do something while the client is reconnecting\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.reconnecting(function() {\r\n    //Do something while the client is reconnecting\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Reconnected ####\r\nThis is fired when the client has successfully reconnected to the server.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.reconnected(function() {\r\n    //Do something while the client is reconnecting\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.reconnected(function() {\r\n    //Do something while the client is reconnecting\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On State Changed ####\r\nThis is fired when the state of the connection has changed in any way.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.stateChanged(function() {\r\n    //Do something while the client is reconnecting\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.stateChanged(function() {\r\n    //Do something while the client is reconnecting\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n#### On Error ####\r\nThis is fired when any error occours with the connection.\r\n##### With the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.error(function() {\r\n    //Do something while the client is reconnecting\r\n  });\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.error(function() {\r\n    //Do something while the client is reconnecting\r\n  }, connection);\r\n\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n### Logging ###\r\nThe following function allows you to enable/disabled SignalR's connection logging:\r\n##### With the generated proxy ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  var connection = signalr.createConnection('HubName');\r\n\r\n  signalr.logging(true); //Enabled default SignalR client logging\r\n  signalr.startConnection(); //Start the connection\r\n});\r\n```\r\n##### Without the generated proxy ####\r\n```javascript\r\nangular.module('App')\r\n.controller('Ctrl', function($scope, signalr) {\r\n  //Starting the connection\r\n  var hub = signalr.createHubConnection('HubName');\r\n  var connection = hub.connection;\r\n  var proxy = hub.proxy;\r\n\r\n  signalr.logging(true, connection); //Enabled default SignalR client logging\r\n  signalr.startHubConnection(connection); //Start the connection\r\n});\r\n```\r\n\r\n### Resources ###\r\n\r\n- [AngularJS Services](https://docs.angularjs.org/guide/services)\r\n- [SignalR jQuery client library](http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client)\r\n- [SignalR jQuery client repo](https://github.com/SignalR/bower-signalr)\r\n\r\n### Demo ###\r\n\r\nA working demo can be found [here](https://github.com/danielfoord/ngSignalR-demo)\r\n\r\n### License ###\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 danielfoord\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}